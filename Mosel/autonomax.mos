model Autonomax
  options explterm
  options noimplicit

  uses "mmxprs";
  uses "python3"; ! Xpress package for running python files

  parameters
    DataFile = "AutonomaxData.txt"; ! Data provided
    SubsetFile = "subsets.txt"; ! File containing subsets
    M = 125; ! Big M used for bandwith constraints
    Scenario = 1; ! Scenario to be used
    NC = 4; ! Number of cities in core net
    Z = 1; ! 1 if Cyclic, 0 if path
  end-parameters

  ! Calculate the subsets
  pyrun("run_subset_script.py"); ! Comment/remove this line if you encounter problems

  declarations
    Cities: set of integer;
    Scenarios: set of integer;
    Subsets: set of integer;

    nCities: integer;
    nScenarios: integer;
    nSubsets: integer;
  end-declarations

  initialisations from DataFile
    nCities;
    nScenarios;
  end-initialisations

  initialisations from SubsetFile
    nSubsets;
  end-initialisations

  Cities := 1..nCities;
  Scenarios := 1..nScenarios;

  if (nSubsets > 0) then
    Subsets := 1..nSubsets;
  end-if
  finalize(Cities);
  finalize(Scenarios);
  finalize(Subsets);

  declarations
    Distance: array(Cities, Cities) of integer;
    Scen: array(Scenarios, Cities)  of real;
    Subset: array(Subsets, Cities) of integer;
  end-declarations

  ! Initialize distance and scenario array from DataFile
  initialisations from DataFile
    Distance;
    Scen;
  end-initialisations

  ! Initialize subset array from subsetfile
  initialisations from SubsetFile
    Subset as "Subsets";
  end-initialisations

  !Declare variables
  declarations
    core_edge: dynamic array(Cities, Cities) of mpvar; ! x(i,j)
    sub_edge: dynamic array(Cities, Cities) of mpvar; ! y(i,j)
    bandwith: dynamic array(Cities, Cities) of mpvar; ! b(i,j)
    core_node: dynamic array(Cities) of mpvar; ! w(i)
    control_node: dynamic array(Cities) of mpvar; ! s(i)
  end-declarations

  !Create all variables
  forall (c1 in Cities) do
    create(core_node(c1));
    core_node(c1) is_binary;

    create(control_node(c1));
    control_node(c1) is_binary;

    forall (c2 in Cities) do
      if (c1 <> c2) then
        create(core_edge(c1, c2));
        core_edge(c1, c2) is_binary;

        create(sub_edge(c1, c2));
        sub_edge(c1, c2) is_binary;

        create(bandwith(c1, c2));
        bandwith(c1, c2) is_continuous;
      end-if
    end-do
  end-do

  !Declare constraints, (n) refers to number in report
  declarations
    const1: dynamic array(Cities, Cities) of linctr; ! Constraint (2), at most one edge between cities
    const2: dynamic array(Cities) of linctr; ! Constraint (3), bandwith flow constraint
    const3: dynamic array(Cities) of linctr; ! Constraint (4), core net connectivity constraint
    const4: dynamic array(Cities) of linctr; ! Constraint (5), no incoming sub net edges for core nodes
    const5: dynamic array(Cities) of linctr; ! Constraint (6), force to core node if incoming or outgoing core edge
    const6: linctr; ! Constraint (7), correct number of core edges
    const7: dynamic array(Subsets) of linctr; ! Constraint (8), subtour elimination constraint
    const8: linctr; ! Constraint (9), ensures correct number of core nodes
    const9: linctr; ! Constraint (10), only one control center node
    const10: dynamic array(Cities) of linctr; ! Constraint (11), control center node must be core node
    const11: dynamic array(Cities) of linctr; ! Constraint (12), all nodes have a parent except control center node
    const12: dynamic array(Cities,Cities) of linctr; ! Constraint (13), only sub edges have assigned bandwith
    MinimumCost: linctr; ! (1), objective function
  end-declarations

! Create constraints
  forall (s in Subsets) do
    !Subtour elimination
    const7(s) := sum(i in Cities, j in Cities | i <> j)Subset(s,i)*Subset(s,j)*core_edge(i,j) <= sum(i in Cities)Subset(s, i)-1;
  end-do

  forall(i in Cities) do
    !Bandwith flow constraint
    const2(i) := sum(j in Cities)(bandwith(j,i)-bandwith(i,j)) >=  Scen(Scenario, i)-M*(1-(sum(j in Cities| i<>j)(sub_edge(j,i))));
    const3(i) := core_node(i) <= sum(j in Cities | j <> i)core_edge(i, j) + sum(j in Cities | j <> i)core_edge(j, i);
    const4(i) := sum(j in Cities | j <> i)sub_edge(j, i) = 1 - core_node(i);
    const5(i) := sum(j in Cities | j <> i)(0.5*core_edge(j,i)+ 0.5*core_edge(i,j)) <= core_node(i);
    const10(i) := control_node(i) <= core_node(i);
    const11(i) := sum(j in Cities | j <> i)core_edge(j, i) + sum(j in Cities | j <> i)sub_edge(j, i) + control_node(i) >= 1;
    forall (j in Cities) do
        const1(i,j):=core_edge(i,j)+sub_edge(i,j)<=1;
        const12(i,j):=bandwith(i,j)<=M*(sub_edge(i,j));
    end-do
  end-do
  const6 := sum(i in Cities, j in Cities | i <> j)core_edge(i,j) = NC - (1-Z);
  const8 :=sum(i in Cities)core_node(i)=NC;
  const9 := sum(i in Cities)control_node(i) = 1;
  !control_node(41) = 1; ! Uncomment this to set Ã–stersund to be the control center

  setparam('xprs_verbose',true);
  setparam('xprs_miplog', -100);
  setparam('xprs_maxtime', -600);
  setparam('zerotol', 1e-7); ! Set zero tolerance to small (positive) number
  MinimumCost := sum(i in Cities, j in Cities | i <> j)(10*core_edge(i,j)*Distance(i,j) + 10*sub_edge(i,j) + ((0.1*Distance(i,j))^1.5)*bandwith(i,j));
  minimize(MinimumCost);
  !minimize(XPRS_LPSTOP,MinimumCost); ! Minimize LP Relaxation, plot will not work

  ! Write results to out.txt
  fopen("out.txt",F_OUTPUT);
  writeln("Control center:");
  forall (c in Cities) do
    if (not getsol(control_node(c))=0) then
      writeln(c);
    end-if
  end-do

  writeln("Cities in the core net:");
  forall (c in Cities) do
    if (not getsol(core_node(c))=0) then
      writeln(c);
    end-if
  end-do

  writeln("Arcs in the corenet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(core_edge(i,j))=0) then
        writeln(i,",",j);
      end-if
    end-do
  end-do

  writeln("Arcs in the subnet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(sub_edge(i,j))=0) then
        writeln(i,",",j);
      end-if
    end-do
  end-do

  writeln("Bandwith in the subnet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(bandwith(i,j))=0) then
        writeln(getsol(bandwith(i,j)));
      end-if
    end-do
  end-do
  writeln("Objective function value");
  writeln(getobjval);
  writeln("Core net cost");
  writeln(sum(i in Cities, j in Cities | i <> j)(10*getsol(core_edge(i,j))*getsol(Distance(i,j))));
  writeln("Sub net cost");
  writeln(sum(i in Cities, j in Cities | i <> j)(10*getsol(sub_edge(i,j)) + ((0.1*getsol(Distance(i,j)))^1.5)*getsol(bandwith(i,j))));
  fclose(F_OUTPUT);

  ! Write results to console
  writeln("Control center:");
  forall (c in Cities) do
    if (not getsol(control_node(c))=0) then
      writeln(c);
    end-if
  end-do

  writeln("Cities in the core net:");
  forall (c in Cities) do
    if (not getsol(core_node(c))=0) then
      writeln(c);
    end-if
  end-do

  writeln("Arcs in the corenet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(core_edge(i,j))=0) then
        writeln(i,",",j);
      end-if
    end-do
  end-do

  writeln("Arcs in the subnet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(sub_edge(i,j))=0) then
        writeln(i,",",j);
      end-if
    end-do
  end-do

  writeln("Bandwith in the subnet");
  forall (i in Cities) do
    forall (j in Cities | j <> i) do
      if (not getsol(bandwith(i,j))=0) then
        writeln(getsol(bandwith(i,j)));
      end-if
    end-do
  end-do
  writeln("Objective function value");
  writeln(getobjval);
  writeln("Core net cost");
  writeln(sum(i in Cities, j in Cities | i <> j)(10*getsol(core_edge(i,j))*getsol(Distance(i,j))));
  writeln("Sub net cost");
  writeln(sum(i in Cities, j in Cities | i <> j)(10*getsol(sub_edge(i,j)) + ((0.1*getsol(Distance(i,j)))^1.5)*getsol(bandwith(i,j))));


  ! Plot the result
  pyrun("run_plot.py"); ! Comment/remove this line if you encounter problems

end-model

